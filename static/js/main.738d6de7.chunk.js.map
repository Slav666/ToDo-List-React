{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleDate","e","setState","target","value","handleText","handleCheckeBox","handleClick","console","log","props","add","maxDate","this","react_default","a","createElement","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","changeStatus","delete","finish","toDateString","TaskList","tasks","filter","done","activeTasks","map","components_Task","key","doneTasks","Fragment","length","App","counter","deleteTask","Object","toConsumableArray","index","findIndex","splice","changeTaskStatus","forEach","getTime","handleAddTask","prevState","concat","components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.738d6de7.chunk.js","sourcesContent":["\nimport React, {Component} from 'react';\n\n\nclass  AddTask extends Component {\n\n    minDate = new Date().toISOString().slice(0,10);\n\n    state = { \n        text: '',\n        checked: false,\n        date: this.minDate\n    }\n\n     handleDate = (e) => {\n        this.setState(\n            {date: e.target.value})\n     }\n\n     handleText = (e) => {\n         this.setState(\n            {text: e.target.value}\n         )\n     }\n\n     handleCheckeBox = (e) => {\n        this.setState(\n           {checked: e.target.checked}\n        )\n    }\n// handleClick method to clear an user input\n    handleClick = () => {\n        console.log(\"Add object\");\n        const add = this.props.add(this.state.text, this.state.checked, this.state.date);\n        if(add) {\n            this.setState({\n                text: '',\n                checked: false,\n                date: this.minDate\n            })\n        }\n    }\n    render() { \n        let maxDate = this.minDate.slice(0,4) * 1 + 1;\n        maxDate = maxDate + \"-12-31\";\n        return ( \n            <div className=\"form\">\n                <input type=\"text\" placeholder=\"Add Task\" value={this.state.text} onChange={this.handleText}/>\n                <input type=\"checkbox\" checked={this.state.checked} id=\"important\" onChange={this.handleCheckeBox}/>\n                <label htmlFor=\"important\">Priority</label>\n                <br/>\n                <label htmlFor=\"date\">When should be finised:</label>\n                <input type=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate}/>\n                <button id=\"addTaskButton\"onClick={this.handleClick}>ADD TASK</button>\n            </div>\n        );\n    }\n}\n \nexport default AddTask;","import React from 'react';\n\nconst Task = (props) => {\n\n    const style = {color: 'red'};\n    const {text, date, id, active, important, finishDate} = props.task;\n\n    if (active) {\n    return ( \n        <div>\n            <p>\n            <strong style={important ? style : null}>{text}</strong><span>{date}</span>\n            <button id=\"doneButton\"onClick={() => props.changeStatus(id)}>DONE</button>\n            <button id=\"removeButton\"onClick={() => props.delete(id)}>REMOVE</button>\n            </p>\n           \n        </div>\n           \n    );\n} else {\n        const finish = new Date(finishDate).toDateString()\n        return(\n        <div>\n            <p>\n            <strong>{text}</strong> <em>(Will be done: {date})</em>\n            <br/>\n            - Task finished: <span>{finish}</span>\n            <button id=\"removeButton\" onClick={() => props.delete(id)}>REMOVE</button>\n            </p>\n        </div>\n        )\n    }\n    \n}\n \nexport default Task;","import React from 'react';\nimport Task from './Task'\n\nconst TaskList = (props) => {\n\n    const active = props.tasks.filter(task => task.active);\n    const done = props.tasks.filter(task => !task.active)\n\n    const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} changeStatus={props.changeStatus}/>)\n    const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} changeStatus={props.changeStatus}/>)\n    return ( \n        <>\n            <div className=\"active\">\n                <h1>Tasks to do</h1>\n                {activeTasks.length > 0 ? activeTasks : <p>No more tasks left</p>}\n            </div>\n            <hr/>\n            <div className=\"done\">\n                <h2>Tasks finalised <em>({done.length})</em></h2>\n                {doneTasks}\n            </div>\n        </>\n        \n    );\n    \n}\n \nexport default TaskList;","import React, { Component } from 'react';\nimport './App.css';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\n\n\nclass App extends Component {\n\n  counter = 5;\n\n  state = {\n    tasks: [\n      {\n      id: 0,\n      text: 'Play in The Witcher-3 game ',\n      date: '2019-11-01',\n      important: true,\n      active: true,\n      finishDate: null,\n    },\n    {\n      id: 1,\n      text: 'Learn React every day ',\n      date: '2019-11-01',\n      important: true,\n      active: true,\n      finishDate: null,\n    },\n    {\n      id: 2,\n      text: 'Become the local gym member ',\n      date: '2019-11-01',\n      important: false,\n      active: true,\n      finishDate: null,\n    },\n    {\n      id: 3,\n      text: 'Start to build new plastic model ',\n      date: '2019-11-01',\n      important: false,\n      active: true,\n      finishDate: null,\n    },\n    ]\n  }\n\n  deleteTask = (id) => {\n    const tasks = [...this.state.tasks];\n    const index = tasks.findIndex(task => task.id === id);\n    tasks.splice(index, 1);\n    this.setState({tasks})\n    // console.log(tasks)\n    // console.log(\"delete element with id \" + id)\n  }\n\n  changeTaskStatus = (id) => {\n    const tasks = [...this.state.tasks]\n  tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    })\n    this.setState({tasks})\n    // console.log(\"change element with id \" + id)\n  }\n\n  handleAddTask = (text, date, important) => {\n    // console.log(\"Object Added\");\n    const task = {\n      id: this.counter,\n      text: text,\n      date: date,\n      important: important,\n      active: true,\n      finishDate: null,\n    }\n    this.counter++\n    // console.log(task, this.counter);\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }))\n    return true;\n  }\n    \n\n  render() {\n    return (\n      <div className=\"App\">\n      <p className=\"title\">ToDo List</p>\n      <AddTask add={this.handleAddTask}/>\n      <TaskList tasks={this.state.tasks} delete={this.deleteTask} changeStatus={this.changeTaskStatus}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}